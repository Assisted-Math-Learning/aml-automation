nameOverride: "jobs-service"
fullnameOverride: "jobs-service"

replicaCount: 1

namespace: aml-dev
global:
  image:
    registry: "docker.io"


registry: ""
repository: bhanuekstep/aml-jobs-service
tag: "1.1.0-GA"
digest: ""

imagePullPolicy: Always
imagePullSecrets: []

commonLabels:
  system.dataset.management: "true"

commonAnnotations: {}

podAnnotations: {}

podSecurityContext:
  {}
  # runAsNonRoot: true
  # runAsUser: 1001
  # fsGroup: 1001

securityContext:
  {}
  # readOnlyRootFilesystem: false
  # capabilities:
  #   drop:
  #   - ALL

# This block is an interface for k8s service spec.
service:
  type: ClusterIP
  ports:
    - name: http
      port: 3002
      targetPort: 3002

ingress:
  enabled: false
  annotations: {}
  hosts:
    - paths:
        - /
      # host: chart-example.local

resources:
  requests:
    cpu: 100m
    memory: 256Mi
  limits:
    cpu: 1
    memory: 512Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 80
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: 80

livenessProbe:
  {}
  # httpGet:
  #   path: "/healthz"
  #   port: 8080
  # initialDelaySeconds: 5
  # periodSeconds: 5

readinessProbe:
  {}
  # httpGet:
  #   path: "/ready"
  #   port: 8080
  # initialDelaySeconds: 5
  # periodSeconds: 5

nodeSelector: {}
tolerations: []
affinity: {}

configmap:
  enabled: true
  mountPath: /config

serviceAccount:
  create: true
  annotations: {}

serviceMonitor:
  enabled: true
  selectorLabels:
    release: monitoring
  endpoints:
    # - port: http # the name of the port in your service, assuming the primary service port is named 'http' in this example.
    #   path: /metrics
    #   interval: 30s
    #   scrapeTimeout: 10s
    #   honorLabels: true
    - port: http
      path: /metrics
      interval: 30s
      scrapeTimeout: 10s
      honorLabels: true

# Example values.yaml structure
initContainers:
  {}
  # - name: init-myservice
  #   image: busybox:1.28
  #   command: ['sh', '-c', "until nslookup kubernetes.$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace).svc.cluster.local; do echo waiting for myservice; sleep 2; done"]

sidecars:
  {}
  # - name: log-reader # Sidecar container
  #   image: busybox # Use another busybox image
  #   command: ["/bin/sh"] # Override the default command
  #   args: ["-c", "tail -f /var/log/app.log"] # Run a shell script that tails the log file

env:
  AML_SERVICE_APPLICATION_PORT: "3002"
  AML_SERVICE_APPLICATION_ENV: "development" 
  AML_SERVICE_APP_VERSION: v1 
  AML_SERVICE_DB_HOST: postgresql.aml-dev.svc.cluster.local
  AML_SERVICE_DB_PORT: "5432"
  AML_SERVICE_DB_USER: postgres
  AML_SERVICE_DB_PASS: postgres
  AML_SERVICE_DB_NAME: postgres
  BUCKET_NAME: "sample"